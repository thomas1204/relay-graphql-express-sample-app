schema {
  query: RootQuery
  mutation: RootMutation
}

input AddArticleInput {
  title: String!
  content: String
  category: ID!
  clientMutationId: String
}

type AddArticlePayload {
  article: articlesEdge
  clientMutationId: String
}

input AddCategoryInput {
  title: String!
  clientMutationId: String
}

type AddCategoryPayload {
  category: categoriesEdge
  clientMutationId: String
}

"""Details of a articles"""
type Article implements Node {
  """The ID of an object"""
  id: ID!

  """Title of article"""
  title: String

  """Content of article"""
  content: String

  """Details of category"""
  category: Category
}

"""A connection to a list of items."""
type articlesConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [articlesEdge]
}

"""An edge in a connection."""
type articlesEdge {
  """The item at the end of the edge"""
  node: Article

  """A cursor for use in pagination"""
  cursor: String!
}

"""A connection to a list of items."""
type categoriesConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [categoriesEdge]
}

"""An edge in a connection."""
type categoriesEdge {
  """The item at the end of the edge"""
  node: Category

  """A cursor for use in pagination"""
  cursor: String!
}

"""Details of a category"""
type Category implements Node {
  """The ID of an object"""
  id: ID!

  """Title of category"""
  title: String
}

"""An object with an ID"""
interface Node {
  """The id of the object."""
  id: ID!
}

"""Information about pagination in a connection."""
type PageInfo {
  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: String

  """When paginating forwards, the cursor to continue."""
  endCursor: String
}

type RootMutation {
  """Adds new category"""
  AddCategory(input: AddCategoryInput!): AddCategoryPayload

  """Adds new article"""
  AddArticle(input: AddArticleInput!): AddArticlePayload
}

type RootQuery {
  """Fetches list of categories"""
  CategoryList(
    """Filter category by its title"""
    searchByTitle: String
    after: String
    first: Int
    before: String
    last: Int
  ): categoriesConnection

  """Fetches list of articles"""
  ArticleList(
    """Filter article by category"""
    searchByCategory: ID
    after: String
    first: Int
    before: String
    last: Int
  ): articlesConnection

  """Fetches an object given its ID"""
  node(
    """The ID of an object"""
    id: ID!
  ): Node
}
